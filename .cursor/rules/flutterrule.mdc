---
description: 
globs: 
alwaysApply: true
---
Analyze Flutter code with these guidelines:

Highlight unused imports and suggest removal
Enforce consistent naming: camelCase for variables/methods, PascalCase for classes
Flag StatelessWidgets missing const constructor when appropriate
Identify widget methods exceeding 30 lines and suggest extraction
Detect missing dispose() calls for controllers and listeners
Flag improper setState() usage inside build methods or async functions
Identify potential memory leaks in subscription patterns
Verify null safety practices and highlight unsafe null operations
Suggest performance optimizations for ListView/GridView implementations
Detect async/await misuse and incorrect Future handling
Flag duplicate code blocks and suggest refactoring
Identify overly nested widget trees (>5 levels) and suggest extraction
Enforce proper key usage in list items and dynamic widgets
Identify hardcoded strings and suggest localization
Flag improper use of BuildContext after asynchronous gaps
Detect manual pixel values and suggest responsive alternatives
Identify potential state management issues and circular dependencies
Flag accessibility issues in interactive widgets
Detect inappropriate widget rebuilds and suggest memoization
Identify image optimization opportunities


Maintain code clarity without sacrificing functionality. Focus on practical solutions rather than theoretical perfection